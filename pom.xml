<properties>
    <!--换成你的harbor仓库地址-->
    <docker.repostory>192.168.10.30:10001</docker.repostory>
    <!--换成你的仓库项目名称-->
    <docker.registry.name>automatic</docker.registry.name>
    <docker.image.tag>1.0.0</docker.image.tag>
    <docker.maven.plugin.version>1.4.10</docker.maven.plugin.version>
</properties>

<build>
    	<!--换成你想设置的build名称-->
        <finalName>wcj-starter</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            
            <!-- docker的maven插件，官网：https://github.com/spotify/docker‐maven‐plugin -->
            <!-- Dockerfile maven plugin -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${docker.maven.plugin.version}</version>
                <executions>
                    <execution>
                    <id>default</id>
                    <goals>
                        <!--如果package时不想用docker打包,就注释掉这个goal-->
                        <goal>build</goal>
                        <goal>push</goal>
                    </goals>
                    </execution>
                </executions>
                <configuration>
                    <contextDirectory>${project.basedir}</contextDirectory>
                    <!-- harbor 仓库用户名及密码-->
             <useMavenSettingsForAuth>useMavenSettingsForAuth>true</useMavenSettingsForAuth>
             <repository>${docker.repostory}/${docker.registry.name}/${project.artifactId}</repository>
                    <tag>${docker.image.tag}</tag>
                    <buildArgs>
                        <!-- 要修改成你的target目录-->
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>

        </plugins>
        
        <resources>
            <!-- 指定 src/main/resources下所有文件及文件夹为资源文件 -->
            <resource>
                <directory>automatic/main/code</directory>
                <targetPath>${project.build.directory}/classes</targetPath>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
